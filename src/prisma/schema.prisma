generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String
  first_name String
  last_name  String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  role         Role?          @relation(fields: [id_role], references: [id])
  id_role      String?
  Tasks        Task[]
  TaskHelps    TaskHelp[]
  Avaliation   Avaliation[]
  Notification Notification[]

  @@map("users")
}

model Role {
  id         String    @id @default(uuid())
  name       String
  active     Boolean
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  users User[]

  @@map("roles")
}

model Task {
  id                String    @id @default(uuid())
  title             String
  description       String
  extra_description String?
  final_date        DateTime
  close_at          DateTime? @db.Date
  created_at        DateTime  @default(now())
  updated_at        DateTime? @updatedAt

  user    User?   @relation(fields: [id_user], references: [id])
  id_user String?

  taskPriority     TaskPriority? @relation(fields: [id_task_priority], references: [id])
  id_task_priority String?
  TaskHelps        TaskHelp[]

  @@map("tasks")
}

model TaskPriority {
  id         String    @id @default(uuid())
  name       String?
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  Tasks      Task[]

  @@map("task_priorities")
}

model TaskHelp {
  id          String    @id @default(uuid())
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  user    User?   @relation(fields: [id_user], references: [id])
  id_user String?

  task    Task?   @relation(fields: [id_task], references: [id])
  id_task String?

  @@map("task_helps")
}

model Avaliation {
  id          String    @id @default(uuid())
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  user    User?   @relation(fields: [id_user], references: [id])
  id_user String?

  @@map("avaliations")
}

model Notification {
  id          String    @id @default(uuid())
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  user    User?   @relation(fields: [id_user], references: [id])
  id_user String?

  @@map("notifications")
}
